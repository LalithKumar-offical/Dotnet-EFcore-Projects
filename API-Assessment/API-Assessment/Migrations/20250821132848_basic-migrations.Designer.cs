// <auto-generated />
using System;
using API_Assessment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Assessment.Migrations
{
    [DbContext(typeof(CodeContextData))]
    [Migration("20250821132848_basic-migrations")]
    partial class basicmigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_Assessment.Models.DirectorClass", b =>
                {
                    b.Property<string>("DirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DirectorAge")
                        .HasColumnType("int");

                    b.Property<string>("DirectorEmail")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("DirectorExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorId");

                    b.ToTable("DbDirector");
                });

            modelBuilder.Entity("API_Assessment.Models.RatingClass", b =>
                {
                    b.Property<string>("RatingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RatingComment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("RatingDate")
                        .HasColumnType("date");

                    b.Property<int?>("RatingNo")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserInstanceUserId")
                        .HasColumnType("int");

                    b.Property<string>("WebseriesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebseriesInstanceWebseriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingId");

                    b.HasIndex("UserInstanceUserId");

                    b.HasIndex("WebseriesInstanceWebseriesId");

                    b.ToTable("DbRating");
                });

            modelBuilder.Entity("API_Assessment.Models.SeasonsClass", b =>
                {
                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeasonPhoto")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("WebseriesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebseriesInstanceWebseriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SeasonId");

                    b.HasIndex("WebseriesInstanceWebseriesId");

                    b.ToTable("DbSeason");
                });

            modelBuilder.Entity("API_Assessment.Models.UserClass", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("UserAdult")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("DbUser");
                });

            modelBuilder.Entity("API_Assessment.Models.WebseriesClass", b =>
                {
                    b.Property<string>("WebseriesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorInstanceDirectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebseriesAgerestrictions")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("WebseriesDate")
                        .HasColumnType("date");

                    b.Property<string>("WebseriesTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebseriesType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WebseriesId");

                    b.HasIndex("DirectorInstanceDirectorId");

                    b.ToTable("DbWebseries");
                });

            modelBuilder.Entity("API_Assessment.Models.RatingClass", b =>
                {
                    b.HasOne("API_Assessment.Models.UserClass", "UserInstance")
                        .WithMany("RatingInstance")
                        .HasForeignKey("UserInstanceUserId");

                    b.HasOne("API_Assessment.Models.WebseriesClass", "WebseriesInstance")
                        .WithMany("RatingInstance")
                        .HasForeignKey("WebseriesInstanceWebseriesId");

                    b.Navigation("UserInstance");

                    b.Navigation("WebseriesInstance");
                });

            modelBuilder.Entity("API_Assessment.Models.SeasonsClass", b =>
                {
                    b.HasOne("API_Assessment.Models.WebseriesClass", "WebseriesInstance")
                        .WithMany("SeasonsInstance")
                        .HasForeignKey("WebseriesInstanceWebseriesId");

                    b.Navigation("WebseriesInstance");
                });

            modelBuilder.Entity("API_Assessment.Models.WebseriesClass", b =>
                {
                    b.HasOne("API_Assessment.Models.DirectorClass", "DirectorInstance")
                        .WithMany("WebseriesInstance")
                        .HasForeignKey("DirectorInstanceDirectorId");

                    b.Navigation("DirectorInstance");
                });

            modelBuilder.Entity("API_Assessment.Models.DirectorClass", b =>
                {
                    b.Navigation("WebseriesInstance");
                });

            modelBuilder.Entity("API_Assessment.Models.UserClass", b =>
                {
                    b.Navigation("RatingInstance");
                });

            modelBuilder.Entity("API_Assessment.Models.WebseriesClass", b =>
                {
                    b.Navigation("RatingInstance");

                    b.Navigation("SeasonsInstance");
                });
#pragma warning restore 612, 618
        }
    }
}
